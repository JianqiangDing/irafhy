grammar definition;
import token;

condition:
	KEY_CONDITION LEFTCURLYBRACKET (intervalhull | polytope) RIGHTCURLYBRACKET;

polytope: KEY_POLYTOPE (hpolytope | vpolytope);

hpolytope: LEFTCURLYBRACKET matrix vector RIGHTCURLYBRACKET;

vpolytope:
	LEFTCURLYBRACKET vector (COMMA? vector)+ RIGHTCURLYBRACKET;

matrix:
	KEY_MATRIX LEFTCURLYBRACKET MAJOR_ORDER =
	(
		KEY_ROW_MAJOR_ORDER
		| KEY_COL_MAJOR_ORDER
	) vector (COMMA? vector)* RIGHTCURLYBRACKET;

vector:
	LEFTROUNDBRACKET OP += (PLUS | MINUS)? NUMBER
	(
		COMMA? OP += (PLUS | MINUS)? NUMBER
	)* RIGHTROUNDBRACKET;

intervalhull:
	KEY_INTERVAL_HULL LEFTCURLYBRACKET interval (COMMA? interval)* RIGHTCURLYBRACKET;

constraints: constraint+;

constraint:
	expression RELATION =
	(
		EQUAL
		| UNEQUAL
		| GEQ
		| LEQ
		| LSS
		| GTR
	) OP = (PLUS | MINUS)? (NUMBER | SCINUM);

system: formula+;

formula: VARIABLE (DERIVATIVE)? ASSIGN expression interval?;

interval:
	LEFTSQUAREBRACKET OP += (PLUS | MINUS)? VAL +=
	(
		NUMBER
		| SCINUM
		| KEY_INFINITY
	) COMMA OP += (PLUS | MINUS)? VAL +=
	(
		NUMBER
		| SCINUM
		| KEY_INFINITY
	) RIGHTSQUAREBRACKET;

expression:
	expression EXPONENT expression														# expExp
	| PLUS expression																	# posExp
	| MINUS expression																	# negExp
	| expression OP = (MULTIPLY | DIVIDE) expression									# expMulDiv
	| expression OP = (PLUS | MINUS) expression											# expAddSub
	| LEFTROUNDBRACKET expression RIGHTROUNDBRACKET										# expBra
	| KEY_SIN_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# sinExp
	| KEY_ARCSIN_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# asinExp
	| KEY_COS_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# cosExp
	| KEY_ARCCOS_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# acosExp
	| KEY_TAN_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# tanExp
	| KEY_ARCTAN_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# atanExp
	| KEY_COT_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# cotExp
	| KEY_ARCCOT_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# acotExp
	| KEY_SINH_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# sinhExp
	| KEY_ARCSINH_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET				# asinhExp
	| KEY_COSH_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# coshExp
	| KEY_ARCCOSH_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET				# acoshExp
	| KEY_TANH_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# tanhExp
	| KEY_ARCTANH_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET				# atanhExp
	| KEY_COTH_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# cothExp
	| KEY_ARCCOTH_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET				# acothExp
	| KEY_LN_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET						# lnExp
	| KEY_LOG_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# logExp
	| KEY_NATURAL_EXP_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET			# nexpExp
	| KEY_SQR_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# sqrExp
	| KEY_SQRT_FUNCTION LEFTROUNDBRACKET expression RIGHTROUNDBRACKET					# sqrtExp
	| KEY_POWER_FUNCTION LEFTROUNDBRACKET expression COMMA expression RIGHTROUNDBRACKET	# powExp
	| (NUMBER | SCINUM)																	# constant
	| VARIABLE																			# variable;

KEY_LOCATIONS: 'LOCATIONS';
KEY_MODEL: 'MODEL';
KEY_FLOWS: 'FLOWS';
KEY_INVARIANT_CONDITIONS: 'INVARIANT_CONDITIONS';

KEY_SETTINGS: 'SETTINGS';
KEY_ANALYSIS: 'ANALYSIS';
KEY_ANALYSIS_FORWARD: 'FORWARD';
KEY_ANALYSIS_BACKWARD: 'BACKWARD';
KEY_TIME_HORIZON: 'TIME_HORIZON';
KEY_STEP: 'STEP';
KEY_GEOMETRY: 'GEOMETRY';
KEY_PLOT_FLAG: 'PLOT';
KEY_PRINT_FLAG: 'PRINT';
KEY_MAX_JUMP: 'MAX_JUMP';
KEY_START_MODEL_ID: 'START_MODEL_ID';
KEY_INITIAL_CONDITION: 'INITIAL_CONDITION';

KEY_TRANSITIONS: 'TRANSITIONS';
KEY_URGENT: 'URGENT';
KEY_JUMP: 'JUMP';
KEY_DIRECTION: 'DIRECTION';
KEY_GUARD_CONDITIONS: 'GUARD_CONDITIONS';
KEY_RESET_MAP: 'RESET_MAP';

KEY_INTERVAL_HULL: 'INTERVAL_HULL';
KEY_POLYTOPE: 'POLYTOPE';
KEY_CONDITION: 'CONDITION';

KEY_MATRIX: 'MATRIX';
KEY_ROW_MAJOR_ORDER: 'ROW_MAJOR';
KEY_COL_MAJOR_ORDER: 'COL_MAJOR';

KEY_SIN_FUNCTION: 'sin' | 'Sin' | 'SIN';
KEY_ARCSIN_FUNCTION: 'arcsin' | 'ArcSin' | 'ARCSIN';
KEY_COS_FUNCTION: 'cos' | 'Cos' | 'COS';
KEY_ARCCOS_FUNCTION: 'arccos' | 'ArcCos' | 'ARCCOS';

KEY_TAN_FUNCTION: 'tan' | 'Tan' | 'TAN';
KEY_ARCTAN_FUNCTION: 'arctan' | 'ArcTan' | 'ARCTAN';
KEY_COT_FUNCTION: 'cot' | 'Cot' | 'COT';
KEY_ARCCOT_FUNCTION: 'arccot' | 'ArcCot' | 'ARCCOT';

KEY_LN_FUNCTION: 'ln' | 'Ln' | 'LN';
KEY_LOG_FUNCTION: 'log' | 'Log' | 'LOG';
KEY_NATURAL_EXP_FUNCTION: 'exp' | 'Exp' | 'EXP';

KEY_SINH_FUNCTION: 'sinh' | 'Sinh' | 'SINH';
KEY_ARCSINH_FUNCTION: 'arcsinh' | 'ArcSinh' | 'ARCSINH';
KEY_COSH_FUNCTION: 'cosh' | 'Cosh' | 'COSH';
KEY_ARCCOSH_FUNCTION: 'arccosh' | 'ArcCosh' | 'ARCCOSH';

KEY_TANH_FUNCTION: 'tanh' | 'Tanh' | 'TANH';
KEY_ARCTANH_FUNCTION: 'arctanh' | 'ArcTanh' | 'ARCTANH';
KEY_COTH_FUNCTION: 'coth' | 'Coth' | 'COTH';
KEY_ARCCOTH_FUNCTION: 'arccoth' | 'ArcCoth' | 'ARCCOTH';

KEY_SQR_FUNCTION: 'sqr' | 'Sqr' | 'SQR';
KEY_SQRT_FUNCTION: 'sqrt' | 'Sqrt' | 'SQRT';
KEY_ABS_FUNCTION: 'abs' | 'Abs' | 'ABS';
KEY_POWER_FUNCTION: 'pow' | 'Pow' | 'POW';